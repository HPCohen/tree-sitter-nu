================================================================================
Test temp.nu
================================================================================
# Convert Fahrenheit to Celcius
def a_command [
     fahren:number # Degrees Fahrenheit
    ] {
    # (100°F − 32) × 5/9 = 37.778°C
    # let celcius = ($fahren - 32) * 5 / 9
    build-string $fahren ' °F is ' $celcius ' °C'
}
 
temp k-to-c 100
echo (char nl)
--------------------------------------------------------------------------------

(source_file
  (comment)
  (function_definition
    (identifier)
    (signature
      (parameter
        (identifier)
        (type))
      (comment))
    (block
      (comment)
      (comment)
      (command
        (identifier)
        (value_path
          (identifier))
        (string)
        (value_path
          (identifier))
        (string))))
  (command
    (identifier)
    (identifier)
    (number_literal))
  (command
    (identifier)
    (cmd_invocation
      (command
        (identifier)
        (identifier)))))

================================================================================
Parse command_substitution
================================================================================
echo (char nl)
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (cmd_invocation
      (command
        (identifier)
        (identifier)))))

================================================================================
Parse shorthand flag
================================================================================
ansi -e $ansi_str
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (flag_shorthand_name)
    (value_path
      (identifier))))

================================================================================
Parse predicate command
================================================================================
echo ($separator | empty?)
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (cmd_invocation
      (binary_expression
        (value_path
          (identifier))
        (command
          (identifier))))))

================================================================================
Parse alias
================================================================================
alias fmt_error = ansi -e "31;1m"
--------------------------------------------------------------------------------

(source_file
  (alias
    (identifier)
    (command
      (identifier)
      (flag_shorthand_name)
      (string))))

================================================================================
Parse if
================================================================================
if 1 > 2 { 
    echo true 
} { 
    echo false 
}
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (number_literal)
    (operator)
    (number_literal)
    (record_or_block
      (command
        (identifier)
        (identifier)))
    (record_or_block
      (command
        (identifier)
        (identifier)))))

================================================================================
Parse if 2
================================================================================
if $incorrect_count > 0 {
  echo `The following directories are named incorrectly: {{$(char newline)}}`
	ls-incorrect-dirs
	exit 1
} {
	exit 0
}
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (value_path
      (identifier))
    (operator)
    (number_literal)
    (record_or_block
      (command
        (identifier)
        (string)
        (identifier)
        (identifier)
        (number_literal)))
    (record_or_block
      (command
        (identifier)
        (number_literal)))))

================================================================================
Parse escaped string
================================================================================
split row '\'
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (identifier)
    (string)))

================================================================================
Parse multiply
================================================================================
let pos_y = 0.995 * $resolution_y
--------------------------------------------------------------------------------

(source_file
  (variable_declaration
    (identifier)
    (binary_expression
      (number_literal)
      (value_path
        (identifier)))))

================================================================================
Parse table
================================================================================
echo [['name', 'tz', 'time']; ['andres' 'US/Eastern' ' '] ['fdncred' 'US/Central' ' '] ['gedge' 'US/Eastern' ' '] ['jturner' 'NZ' ' '] ['wycats' 'US/Pacific' ' ']]
--------------------------------------------------------------------------------

(source_file
  (command
    (identifier)
    (table
      (column_header
        (string)
        (string)
        (string))
      (array
        (string)
        (string)
        (string))
      (array
        (string)
        (string)
        (string))
      (array
        (string)
        (string)
        (string))
      (array
        (string)
        (string)
        (string))
      (array
        (string)
        (string)
        (string)))))
